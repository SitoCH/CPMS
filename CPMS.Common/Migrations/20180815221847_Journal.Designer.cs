// <auto-generated />
using System;
using CPMS.Common.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CPMS.Common.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180815221847_Journal")]
    partial class Journal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CPMS.Common.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { Id = 1, Name = "Regione X" },
                        new { Id = 2, Name = "Compagnia XX" },
                        new { Id = 3, Name = "Sezione aiuto alla condotta 1", ParentId = 2 },
                        new { Id = 4, Name = "Gruppo 1", ParentId = 3 },
                        new { Id = 5, Name = "Gruppo 2", ParentId = 3 },
                        new { Id = 6, Name = "Sezione aiuto alla condotta 2", ParentId = 2 },
                        new { Id = 7, Name = "Gruppo 1", ParentId = 6 },
                        new { Id = 8, Name = "Gruppo 2", ParentId = 6 },
                        new { Id = 9, Name = "Ospiti" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Interventions");

                    b.HasData(
                        new { Id = 1, Name = "Intervento demo" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InterventionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("InterventionId");

                    b.ToTable("Journal");

                    b.HasData(
                        new { Id = 1, InterventionId = 1, Name = "PC fronte" },
                        new { Id = 2, InterventionId = 1, Name = "PC retro" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("JournalEntryChannelId");

                    b.Property<int>("JournalId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryChannelId");

                    b.HasIndex("JournalId");

                    b.ToTable("JournalEntry");

                    b.HasData(
                        new { Id = 1, DateTime = new DateTime(2018, 2, 2, 8, 30, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 1, Text = "Inizio esercizio" },
                        new { Id = 2, DateTime = new DateTime(2018, 2, 2, 8, 36, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC fronte 1" },
                        new { Id = 3, DateTime = new DateTime(2018, 2, 2, 8, 42, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC fronte 2" },
                        new { Id = 4, DateTime = new DateTime(2018, 2, 2, 8, 45, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 3, JournalId = 1, Text = "Messaggio PC fronte 3" },
                        new { Id = 5, DateTime = new DateTime(2018, 2, 2, 8, 25, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 2, Text = "Inizio esercizio" },
                        new { Id = 6, DateTime = new DateTime(2018, 2, 2, 8, 38, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 1, Text = "Messaggio PC retro 1" },
                        new { Id = 7, DateTime = new DateTime(2018, 2, 2, 8, 40, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC retro 2" },
                        new { Id = 8, DateTime = new DateTime(2018, 2, 2, 8, 40, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC retro 3" },
                        new { Id = 9, DateTime = new DateTime(2018, 2, 2, 8, 47, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 1, Text = "Messaggio PC retro 4" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.JournalEntryChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JournalEntryChannel");

                    b.HasData(
                        new { Id = 1, Icon = "fa-phone", Name = "Phone" },
                        new { Id = 2, Icon = "fa-mobile", Name = "Mobile" },
                        new { Id = 3, Icon = "fa-envelope ", Name = "E-mail" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<int>("GroupId");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, GroupId = 9, PasswordHash = new byte[] { 46, 199, 55, 151, 127, 235, 238, 33, 92, 110, 237, 30, 132, 246, 56, 201, 4, 61, 129, 62, 141, 146, 205, 135, 230, 234, 106, 120, 16, 50, 248, 206, 244, 13, 34, 44, 98, 190, 136, 66, 253, 165, 209, 82, 248, 67, 239, 248, 18, 131, 154, 250, 44, 93, 212, 221, 16, 255, 109, 201, 90, 226, 244, 192 }, PasswordSalt = new byte[] { 248, 107, 74, 122, 139, 216, 237, 219, 60, 9, 113, 180, 128, 79, 196, 90, 191, 146, 119, 54, 191, 149, 43, 175, 115, 101, 161, 13, 104, 204, 106, 47, 143, 127, 18, 99, 15, 240, 177, 35, 132, 126, 52, 65, 104, 139, 200, 122, 35, 107, 28, 198, 3, 129, 184, 75, 22, 202, 92, 18, 141, 29, 162, 175, 6, 62, 38, 46, 98, 189, 0, 250, 124, 69, 144, 158, 58, 223, 244, 228, 73, 105, 194, 78, 173, 224, 76, 244, 198, 131, 60, 78, 148, 155, 128, 78, 99, 8, 177, 103, 178, 243, 127, 156, 5, 239, 169, 104, 233, 193, 98, 87, 180, 27, 125, 205, 219, 218, 70, 46, 136, 147, 224, 218, 233, 130, 243, 120 }, Username = "admin" },
                        new { Id = 2, FirstName = "Nome comandante di compagnia", GroupId = 2, LastName = "", PasswordHash = new byte[] { 46, 199, 55, 151, 127, 235, 238, 33, 92, 110, 237, 30, 132, 246, 56, 201, 4, 61, 129, 62, 141, 146, 205, 135, 230, 234, 106, 120, 16, 50, 248, 206, 244, 13, 34, 44, 98, 190, 136, 66, 253, 165, 209, 82, 248, 67, 239, 248, 18, 131, 154, 250, 44, 93, 212, 221, 16, 255, 109, 201, 90, 226, 244, 192 }, PasswordSalt = new byte[] { 248, 107, 74, 122, 139, 216, 237, 219, 60, 9, 113, 180, 128, 79, 196, 90, 191, 146, 119, 54, 191, 149, 43, 175, 115, 101, 161, 13, 104, 204, 106, 47, 143, 127, 18, 99, 15, 240, 177, 35, 132, 126, 52, 65, 104, 139, 200, 122, 35, 107, 28, 198, 3, 129, 184, 75, 22, 202, 92, 18, 141, 29, 162, 175, 6, 62, 38, 46, 98, 189, 0, 250, 124, 69, 144, 158, 58, 223, 244, 228, 73, 105, 194, 78, 173, 224, 76, 244, 198, 131, 60, 78, 148, 155, 128, 78, 99, 8, 177, 103, 178, 243, 127, 156, 5, 239, 169, 104, 233, 193, 98, 87, 180, 27, 125, 205, 219, 218, 70, 46, 136, 147, 224, 218, 233, 130, 243, 120 }, Username = "ComandanteDiCompagnia-1" },
                        new { Id = 3, FirstName = "Nome capo sezione", GroupId = 3, LastName = "", PasswordHash = new byte[] { 46, 199, 55, 151, 127, 235, 238, 33, 92, 110, 237, 30, 132, 246, 56, 201, 4, 61, 129, 62, 141, 146, 205, 135, 230, 234, 106, 120, 16, 50, 248, 206, 244, 13, 34, 44, 98, 190, 136, 66, 253, 165, 209, 82, 248, 67, 239, 248, 18, 131, 154, 250, 44, 93, 212, 221, 16, 255, 109, 201, 90, 226, 244, 192 }, PasswordSalt = new byte[] { 248, 107, 74, 122, 139, 216, 237, 219, 60, 9, 113, 180, 128, 79, 196, 90, 191, 146, 119, 54, 191, 149, 43, 175, 115, 101, 161, 13, 104, 204, 106, 47, 143, 127, 18, 99, 15, 240, 177, 35, 132, 126, 52, 65, 104, 139, 200, 122, 35, 107, 28, 198, 3, 129, 184, 75, 22, 202, 92, 18, 141, 29, 162, 175, 6, 62, 38, 46, 98, 189, 0, 250, 124, 69, 144, 158, 58, 223, 244, 228, 73, 105, 194, 78, 173, 224, 76, 244, 198, 131, 60, 78, 148, 155, 128, 78, 99, 8, 177, 103, 178, 243, 127, 156, 5, 239, 169, 104, 233, 193, 98, 87, 180, 27, 125, 205, 219, 218, 70, 46, 136, 147, 224, 218, 233, 130, 243, 120 }, Username = "CapoSezione-1" },
                        new { Id = 4, FirstName = "Nome capo gruoppo", GroupId = 4, LastName = "", PasswordHash = new byte[] { 46, 199, 55, 151, 127, 235, 238, 33, 92, 110, 237, 30, 132, 246, 56, 201, 4, 61, 129, 62, 141, 146, 205, 135, 230, 234, 106, 120, 16, 50, 248, 206, 244, 13, 34, 44, 98, 190, 136, 66, 253, 165, 209, 82, 248, 67, 239, 248, 18, 131, 154, 250, 44, 93, 212, 221, 16, 255, 109, 201, 90, 226, 244, 192 }, PasswordSalt = new byte[] { 248, 107, 74, 122, 139, 216, 237, 219, 60, 9, 113, 180, 128, 79, 196, 90, 191, 146, 119, 54, 191, 149, 43, 175, 115, 101, 161, 13, 104, 204, 106, 47, 143, 127, 18, 99, 15, 240, 177, 35, 132, 126, 52, 65, 104, 139, 200, 122, 35, 107, 28, 198, 3, 129, 184, 75, 22, 202, 92, 18, 141, 29, 162, 175, 6, 62, 38, 46, 98, 189, 0, 250, 124, 69, 144, 158, 58, 223, 244, 228, 73, 105, 194, 78, 173, 224, 76, 244, 198, 131, 60, 78, 148, 155, 128, 78, 99, 8, 177, 103, 178, 243, 127, 156, 5, 239, 169, 104, 233, 193, 98, 87, 180, 27, 125, 205, 219, 218, 70, 46, 136, 147, 224, 218, 233, 130, 243, 120 }, Username = "CapoGruppo-1" },
                        new { Id = 5, FirstName = "Nome milite 1", GroupId = 4, LastName = "", PasswordHash = new byte[] { 46, 199, 55, 151, 127, 235, 238, 33, 92, 110, 237, 30, 132, 246, 56, 201, 4, 61, 129, 62, 141, 146, 205, 135, 230, 234, 106, 120, 16, 50, 248, 206, 244, 13, 34, 44, 98, 190, 136, 66, 253, 165, 209, 82, 248, 67, 239, 248, 18, 131, 154, 250, 44, 93, 212, 221, 16, 255, 109, 201, 90, 226, 244, 192 }, PasswordSalt = new byte[] { 248, 107, 74, 122, 139, 216, 237, 219, 60, 9, 113, 180, 128, 79, 196, 90, 191, 146, 119, 54, 191, 149, 43, 175, 115, 101, 161, 13, 104, 204, 106, 47, 143, 127, 18, 99, 15, 240, 177, 35, 132, 126, 52, 65, 104, 139, 200, 122, 35, 107, 28, 198, 3, 129, 184, 75, 22, 202, 92, 18, 141, 29, 162, 175, 6, 62, 38, 46, 98, 189, 0, 250, 124, 69, 144, 158, 58, 223, 244, 228, 73, 105, 194, 78, 173, 224, 76, 244, 198, 131, 60, 78, 148, 155, 128, 78, 99, 8, 177, 103, 178, 243, 127, 156, 5, 239, 169, 104, 233, 193, 98, 87, 180, 27, 125, 205, 219, 218, 70, 46, 136, 147, 224, 218, 233, 130, 243, 120 }, Username = "Milite-1" },
                        new { Id = 6, FirstName = "Nome milite 2", GroupId = 4, LastName = "", PasswordHash = new byte[] { 46, 199, 55, 151, 127, 235, 238, 33, 92, 110, 237, 30, 132, 246, 56, 201, 4, 61, 129, 62, 141, 146, 205, 135, 230, 234, 106, 120, 16, 50, 248, 206, 244, 13, 34, 44, 98, 190, 136, 66, 253, 165, 209, 82, 248, 67, 239, 248, 18, 131, 154, 250, 44, 93, 212, 221, 16, 255, 109, 201, 90, 226, 244, 192 }, PasswordSalt = new byte[] { 248, 107, 74, 122, 139, 216, 237, 219, 60, 9, 113, 180, 128, 79, 196, 90, 191, 146, 119, 54, 191, 149, 43, 175, 115, 101, 161, 13, 104, 204, 106, 47, 143, 127, 18, 99, 15, 240, 177, 35, 132, 126, 52, 65, 104, 139, 200, 122, 35, 107, 28, 198, 3, 129, 184, 75, 22, 202, 92, 18, 141, 29, 162, 175, 6, 62, 38, 46, 98, 189, 0, 250, 124, 69, 144, 158, 58, 223, 244, 228, 73, 105, 194, 78, 173, 224, 76, 244, 198, 131, 60, 78, 148, 155, 128, 78, 99, 8, 177, 103, 178, 243, 127, 156, 5, 239, 169, 104, 233, 193, 98, 87, 180, 27, 125, 205, 219, 218, 70, 46, 136, 147, 224, 218, 233, 130, 243, 120 }, Username = "Milite-2" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.Group", b =>
                {
                    b.HasOne("CPMS.Common.Entities.Group", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("CPMS.Common.Entities.Journal", b =>
                {
                    b.HasOne("CPMS.Common.Entities.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPMS.Common.Entities.JournalEntry", b =>
                {
                    b.HasOne("CPMS.Common.Entities.JournalEntryChannel", "JournalEntryChannel")
                        .WithMany()
                        .HasForeignKey("JournalEntryChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPMS.Common.Entities.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPMS.Common.Entities.User", b =>
                {
                    b.HasOne("CPMS.Common.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
