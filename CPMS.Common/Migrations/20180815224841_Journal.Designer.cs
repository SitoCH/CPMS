// <auto-generated />
using System;
using CPMS.Common.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CPMS.Common.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180815224841_Journal")]
    partial class Journal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CPMS.Common.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { Id = 1, Name = "Regione X" },
                        new { Id = 2, Name = "Compagnia XX", ParentId = 1 },
                        new { Id = 3, Name = "Sezione aiuto alla condotta 1", ParentId = 2 },
                        new { Id = 4, Name = "Gruppo 1", ParentId = 3 },
                        new { Id = 5, Name = "Gruppo 2", ParentId = 3 },
                        new { Id = 6, Name = "Sezione aiuto alla condotta 2", ParentId = 2 },
                        new { Id = 7, Name = "Gruppo 1", ParentId = 6 },
                        new { Id = 8, Name = "Gruppo 2", ParentId = 6 },
                        new { Id = 9, Name = "Ospiti" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Interventions");

                    b.HasData(
                        new { Id = 1, Name = "Intervento demo" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InterventionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("InterventionId");

                    b.ToTable("Journal");

                    b.HasData(
                        new { Id = 1, InterventionId = 1, Name = "PC fronte" },
                        new { Id = 2, InterventionId = 1, Name = "PC retro" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("JournalEntryChannelId");

                    b.Property<int>("JournalId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryChannelId");

                    b.HasIndex("JournalId");

                    b.ToTable("JournalEntry");

                    b.HasData(
                        new { Id = 1, DateTime = new DateTime(2018, 2, 2, 8, 30, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 1, Text = "Inizio esercizio" },
                        new { Id = 2, DateTime = new DateTime(2018, 2, 2, 8, 36, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC fronte 1" },
                        new { Id = 3, DateTime = new DateTime(2018, 2, 2, 8, 42, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC fronte 2" },
                        new { Id = 4, DateTime = new DateTime(2018, 2, 2, 8, 45, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 3, JournalId = 1, Text = "Messaggio PC fronte 3" },
                        new { Id = 5, DateTime = new DateTime(2018, 2, 2, 8, 25, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 2, Text = "Inizio esercizio" },
                        new { Id = 6, DateTime = new DateTime(2018, 2, 2, 8, 38, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 1, Text = "Messaggio PC retro 1" },
                        new { Id = 7, DateTime = new DateTime(2018, 2, 2, 8, 40, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC retro 2" },
                        new { Id = 8, DateTime = new DateTime(2018, 2, 2, 8, 40, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 1, JournalId = 1, Text = "Messaggio PC retro 3" },
                        new { Id = 9, DateTime = new DateTime(2018, 2, 2, 8, 47, 0, 0, DateTimeKind.Unspecified), JournalEntryChannelId = 2, JournalId = 1, Text = "Messaggio PC retro 4" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.JournalEntryChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JournalEntryChannel");

                    b.HasData(
                        new { Id = 1, Icon = "fa-phone", Name = "Phone" },
                        new { Id = 2, Icon = "fa-mobile", Name = "Mobile" },
                        new { Id = 3, Icon = "fa-envelope ", Name = "E-mail" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<int>("GroupId");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, GroupId = 9, PasswordHash = new byte[] { 26, 174, 194, 213, 79, 58, 128, 154, 224, 157, 19, 239, 200, 34, 148, 127, 67, 146, 128, 34, 7, 184, 131, 119, 214, 119, 152, 176, 12, 90, 238, 47, 96, 156, 65, 16, 128, 188, 198, 28, 240, 40, 120, 148, 202, 92, 197, 42, 227, 74, 36, 171, 242, 207, 202, 6, 30, 196, 7, 232, 193, 78, 197, 58 }, PasswordSalt = new byte[] { 18, 204, 70, 61, 118, 37, 255, 217, 241, 57, 4, 170, 135, 249, 103, 19, 190, 214, 139, 162, 47, 34, 180, 154, 240, 88, 170, 17, 164, 154, 227, 8, 49, 114, 109, 85, 251, 42, 214, 112, 242, 191, 201, 24, 40, 104, 55, 217, 21, 4, 233, 69, 194, 119, 143, 231, 80, 70, 103, 145, 165, 226, 53, 20, 204, 255, 117, 125, 86, 161, 90, 220, 0, 253, 175, 207, 111, 201, 205, 6, 111, 210, 92, 238, 38, 227, 35, 68, 126, 16, 147, 183, 171, 19, 35, 179, 189, 75, 14, 217, 186, 120, 61, 39, 194, 4, 230, 190, 234, 37, 241, 97, 129, 215, 110, 64, 182, 148, 149, 74, 198, 96, 134, 59, 199, 224, 93, 43 }, Username = "admin" },
                        new { Id = 2, FirstName = "Nome comandante di compagnia", GroupId = 2, LastName = "", PasswordHash = new byte[] { 26, 174, 194, 213, 79, 58, 128, 154, 224, 157, 19, 239, 200, 34, 148, 127, 67, 146, 128, 34, 7, 184, 131, 119, 214, 119, 152, 176, 12, 90, 238, 47, 96, 156, 65, 16, 128, 188, 198, 28, 240, 40, 120, 148, 202, 92, 197, 42, 227, 74, 36, 171, 242, 207, 202, 6, 30, 196, 7, 232, 193, 78, 197, 58 }, PasswordSalt = new byte[] { 18, 204, 70, 61, 118, 37, 255, 217, 241, 57, 4, 170, 135, 249, 103, 19, 190, 214, 139, 162, 47, 34, 180, 154, 240, 88, 170, 17, 164, 154, 227, 8, 49, 114, 109, 85, 251, 42, 214, 112, 242, 191, 201, 24, 40, 104, 55, 217, 21, 4, 233, 69, 194, 119, 143, 231, 80, 70, 103, 145, 165, 226, 53, 20, 204, 255, 117, 125, 86, 161, 90, 220, 0, 253, 175, 207, 111, 201, 205, 6, 111, 210, 92, 238, 38, 227, 35, 68, 126, 16, 147, 183, 171, 19, 35, 179, 189, 75, 14, 217, 186, 120, 61, 39, 194, 4, 230, 190, 234, 37, 241, 97, 129, 215, 110, 64, 182, 148, 149, 74, 198, 96, 134, 59, 199, 224, 93, 43 }, Username = "ComandanteDiCompagnia-1" },
                        new { Id = 3, FirstName = "Nome capo sezione", GroupId = 3, LastName = "", PasswordHash = new byte[] { 26, 174, 194, 213, 79, 58, 128, 154, 224, 157, 19, 239, 200, 34, 148, 127, 67, 146, 128, 34, 7, 184, 131, 119, 214, 119, 152, 176, 12, 90, 238, 47, 96, 156, 65, 16, 128, 188, 198, 28, 240, 40, 120, 148, 202, 92, 197, 42, 227, 74, 36, 171, 242, 207, 202, 6, 30, 196, 7, 232, 193, 78, 197, 58 }, PasswordSalt = new byte[] { 18, 204, 70, 61, 118, 37, 255, 217, 241, 57, 4, 170, 135, 249, 103, 19, 190, 214, 139, 162, 47, 34, 180, 154, 240, 88, 170, 17, 164, 154, 227, 8, 49, 114, 109, 85, 251, 42, 214, 112, 242, 191, 201, 24, 40, 104, 55, 217, 21, 4, 233, 69, 194, 119, 143, 231, 80, 70, 103, 145, 165, 226, 53, 20, 204, 255, 117, 125, 86, 161, 90, 220, 0, 253, 175, 207, 111, 201, 205, 6, 111, 210, 92, 238, 38, 227, 35, 68, 126, 16, 147, 183, 171, 19, 35, 179, 189, 75, 14, 217, 186, 120, 61, 39, 194, 4, 230, 190, 234, 37, 241, 97, 129, 215, 110, 64, 182, 148, 149, 74, 198, 96, 134, 59, 199, 224, 93, 43 }, Username = "CapoSezione-1" },
                        new { Id = 4, FirstName = "Nome capo gruoppo", GroupId = 4, LastName = "", PasswordHash = new byte[] { 26, 174, 194, 213, 79, 58, 128, 154, 224, 157, 19, 239, 200, 34, 148, 127, 67, 146, 128, 34, 7, 184, 131, 119, 214, 119, 152, 176, 12, 90, 238, 47, 96, 156, 65, 16, 128, 188, 198, 28, 240, 40, 120, 148, 202, 92, 197, 42, 227, 74, 36, 171, 242, 207, 202, 6, 30, 196, 7, 232, 193, 78, 197, 58 }, PasswordSalt = new byte[] { 18, 204, 70, 61, 118, 37, 255, 217, 241, 57, 4, 170, 135, 249, 103, 19, 190, 214, 139, 162, 47, 34, 180, 154, 240, 88, 170, 17, 164, 154, 227, 8, 49, 114, 109, 85, 251, 42, 214, 112, 242, 191, 201, 24, 40, 104, 55, 217, 21, 4, 233, 69, 194, 119, 143, 231, 80, 70, 103, 145, 165, 226, 53, 20, 204, 255, 117, 125, 86, 161, 90, 220, 0, 253, 175, 207, 111, 201, 205, 6, 111, 210, 92, 238, 38, 227, 35, 68, 126, 16, 147, 183, 171, 19, 35, 179, 189, 75, 14, 217, 186, 120, 61, 39, 194, 4, 230, 190, 234, 37, 241, 97, 129, 215, 110, 64, 182, 148, 149, 74, 198, 96, 134, 59, 199, 224, 93, 43 }, Username = "CapoGruppo-1" },
                        new { Id = 5, FirstName = "Nome milite 1", GroupId = 4, LastName = "", PasswordHash = new byte[] { 26, 174, 194, 213, 79, 58, 128, 154, 224, 157, 19, 239, 200, 34, 148, 127, 67, 146, 128, 34, 7, 184, 131, 119, 214, 119, 152, 176, 12, 90, 238, 47, 96, 156, 65, 16, 128, 188, 198, 28, 240, 40, 120, 148, 202, 92, 197, 42, 227, 74, 36, 171, 242, 207, 202, 6, 30, 196, 7, 232, 193, 78, 197, 58 }, PasswordSalt = new byte[] { 18, 204, 70, 61, 118, 37, 255, 217, 241, 57, 4, 170, 135, 249, 103, 19, 190, 214, 139, 162, 47, 34, 180, 154, 240, 88, 170, 17, 164, 154, 227, 8, 49, 114, 109, 85, 251, 42, 214, 112, 242, 191, 201, 24, 40, 104, 55, 217, 21, 4, 233, 69, 194, 119, 143, 231, 80, 70, 103, 145, 165, 226, 53, 20, 204, 255, 117, 125, 86, 161, 90, 220, 0, 253, 175, 207, 111, 201, 205, 6, 111, 210, 92, 238, 38, 227, 35, 68, 126, 16, 147, 183, 171, 19, 35, 179, 189, 75, 14, 217, 186, 120, 61, 39, 194, 4, 230, 190, 234, 37, 241, 97, 129, 215, 110, 64, 182, 148, 149, 74, 198, 96, 134, 59, 199, 224, 93, 43 }, Username = "Milite-1" },
                        new { Id = 6, FirstName = "Nome milite 2", GroupId = 4, LastName = "", PasswordHash = new byte[] { 26, 174, 194, 213, 79, 58, 128, 154, 224, 157, 19, 239, 200, 34, 148, 127, 67, 146, 128, 34, 7, 184, 131, 119, 214, 119, 152, 176, 12, 90, 238, 47, 96, 156, 65, 16, 128, 188, 198, 28, 240, 40, 120, 148, 202, 92, 197, 42, 227, 74, 36, 171, 242, 207, 202, 6, 30, 196, 7, 232, 193, 78, 197, 58 }, PasswordSalt = new byte[] { 18, 204, 70, 61, 118, 37, 255, 217, 241, 57, 4, 170, 135, 249, 103, 19, 190, 214, 139, 162, 47, 34, 180, 154, 240, 88, 170, 17, 164, 154, 227, 8, 49, 114, 109, 85, 251, 42, 214, 112, 242, 191, 201, 24, 40, 104, 55, 217, 21, 4, 233, 69, 194, 119, 143, 231, 80, 70, 103, 145, 165, 226, 53, 20, 204, 255, 117, 125, 86, 161, 90, 220, 0, 253, 175, 207, 111, 201, 205, 6, 111, 210, 92, 238, 38, 227, 35, 68, 126, 16, 147, 183, 171, 19, 35, 179, 189, 75, 14, 217, 186, 120, 61, 39, 194, 4, 230, 190, 234, 37, 241, 97, 129, 215, 110, 64, 182, 148, 149, 74, 198, 96, 134, 59, 199, 224, 93, 43 }, Username = "Milite-2" }
                    );
                });

            modelBuilder.Entity("CPMS.Common.Entities.Group", b =>
                {
                    b.HasOne("CPMS.Common.Entities.Group", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("CPMS.Common.Entities.Journal", b =>
                {
                    b.HasOne("CPMS.Common.Entities.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPMS.Common.Entities.JournalEntry", b =>
                {
                    b.HasOne("CPMS.Common.Entities.JournalEntryChannel", "JournalEntryChannel")
                        .WithMany()
                        .HasForeignKey("JournalEntryChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPMS.Common.Entities.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPMS.Common.Entities.User", b =>
                {
                    b.HasOne("CPMS.Common.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
